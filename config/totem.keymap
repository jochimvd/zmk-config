//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define BASE        0
#define NUM         1
#define SYM         2
#define NAV         3
#define MED         4
#define FUN         5
#define GAME        6

&lt {
    tapping-term-ms = <200>;
    quick-tap-ms = <175>;
    flavor = "tap-preferred";
};

/ {
    combos {
        compatible = "zmk,combos";
        combo_z {
            timeout-ms = <50>;
            key-positions = <6 7>;  // L+D
            layers = <BASE>;
            bindings = <&kp Z>;
        };

        combo_q {
            timeout-ms = <50>;
            key-positions = <7 8>;  // D+P
            layers = <BASE>;
            bindings = <&kp Q>;
        };

        combo_copy {
            timeout-ms = <50>;
            key-positions = <22 23>;
            layers = <BASE>;
            bindings = <&kp K_COPY>;
        };

        combo_cut {
            timeout-ms = <50>;
            key-positions = <22 24>;
            layers = <BASE>;
            bindings = <&kp K_CUT>;
        };

        combo_paste {
            timeout-ms = <50>;
            key-positions = <23 24>;
            layers = <BASE>;
            bindings = <&kp K_PASTE>;
        };
    };

    behaviors {
        hm: homerow_mods {
            label = "Homerow Mod";
            compatible = "zmk,behavior-hold-tap";
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

        comma_m: comma_morph {  // tap: comma | shift + tap: semicolon
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMI>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dot_m: dot_morph {  // tap: dot | shift + tap: colon
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp COLON>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        qmark_m: questionmark_morph {  // tap: question mark | shift + tap: exclamation mark
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp QMARK>, <&kp EXCL>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        slash_m: slash_morph {  // tap: slash | shift + tap: backslash
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp SLASH>, <&kp BSLH>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        bspc_m: backspace_morph {  // tap: backspace | shift + tap: delete
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BSPC>, <&kp DEL>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        min_m: minus_morph {  // tap: minus | shift + tap: plus
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp MINUS>, <&kp PLUS>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        div_m: divide_morph {  // tap: forward slash | shift + tap: asterisk
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp SLASH>, <&kp ASTRK>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        par_m: paren_morph {  // tap: left parenthesis | shift + tap: right parenthesis
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LPAR>, <&kp RPAR>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        lpb_m: left_paren_left_bracket_morph {  // tap: left parenthesis | shift + tap: left bracket
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LPAR>, <&kp LBKT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        rpb_m: right_paren_right_bracket_morph {  // tap: right parenthesis | shift + tap: right bracket
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RPAR>, <&kp RBKT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        lblt_m: left_brace_less_than_morph {  // tap: left brace | shift + tap: less than
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LBRC>, <&kp LT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        rbgt_m: right_brace_greater_than_morph {  // tap: right brace | shift + tap: greater than
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RBRC>, <&kp GT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            display-name = "Base";
            bindings = <
         &kp B       &kp Y       &kp O        &kp U        &kp EQUAL      &kp X      &kp L          &kp D        &kp P       &kp F
         &hm LALT C  &hm LGUI I  &hm LCTRL E  &hm LSHFT A  &kp APOS       &kp K      &hm LSHFT H    &hm LCTRL T  &hm LGUI N  &hm LALT S
&kp ESC  &slash_m    &qmark_m    &comma_m     &dot_m       &kp MINUS      &kp J      &kp M          &kp G        &kp W       &kp V       &kp ESC
                                 &lt MED TAB  &lt NAV RET  &lt NUM SPACE  &lt SYM R  &lt GAME BSPC  &lt FUN ESC
            >;
        };

        num_layer {
            display-name = "Numerals";
            bindings = <
          &none     &none     &none      &none      &none   &min_m  &kp N7    &kp N8     &kp N9  &kp CARET
          &kp LALT  &kp LGUI  &kp LCTRL  &kp LSHFT  &none   &kp N0  &kp N1    &kp N2     &kp N3  &kp PRCNT
&to GAME  &none     &none     &none      &none      &none   &div_m  &kp N4    &kp N5     &kp N6  &kp HASH   &par_m
                              &none      &none      &none   &dot_m  &comma_m  &kp EQUAL
            >;
        };

        sym_layer {
            display-name = "Symbols";
            bindings = <
       &kp GRAVE  &none      &lblt_m   &rbgt_m   &kp PIPE   &none  &none      &none      &none     &none
       &kp AT     &kp ASTRK  &lpb_m    &rpb_m    &kp AMPS   &none  &kp LSHFT  &kp LCTRL  &kp LGUI  &kp LALT
&none  &kp TILDE  &kp CARET  &kp DLLR  &kp HASH  &kp PRCNT  &none  &none      &none      &none     &none     &none
                             &none     &none     &none      &none  &none      &none
            >;
        };

        nav_layer {
            display-name = "Navigation";
            bindings = <
       &none     &none     &none      &none      &none   &none       &none     &none      &none      &none
       &kp LALT  &kp LGUI  &kp LCTRL  &kp LSHFT  &none   &caps_word  &kp LEFT  &kp DOWN   &kp UP     &kp RIGHT
&none  &none     &none     &none      &none      &none   &kp INS     &kp HOME  &kp PG_DN  &kp PG_UP  &kp END    &none
                           &none      &none      &none   &none       &kp DEL   &none
            >;
        };

        med_layer {
            display-name = "Media";
            bindings = <
       &none     &none     &none      &none      &none   &none         &none         &none         &none         &none
       &kp LALT  &kp LGUI  &kp LCTRL  &kp LSHFT  &none   &out OUT_USB  &kp C_PREV    &kp C_VOL_DN  &kp C_VOL_UP  &kp C_NEXT
&none  &none     &none     &none      &none      &none   &out OUT_BLE  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_CLR
                           &none      &none      &none   &kp C_STOP    &kp C_PP      &kp C_MUTE
            >;
        };

        fun_layer {
            display-name = "Function";
            bindings = <
                &kp F12  &kp F7  &kp F8     &kp F9  &kp PSCRN        &none  &none      &none      &none     &none
                &kp F11  &kp F4  &kp F5     &kp F6  &kp SLCK         &none  &kp LSHFT  &kp LCTRL  &kp LGUI  &kp LALT
&studio_unlock  &kp F10  &kp F1  &kp F2     &kp F3  &kp PAUSE_BREAK  &none  &none      &none      &none     &none     &none
                                 &kp K_APP  &none   &none            &none  &none      &none
            >;
        };

        game_layer {
            display-name = "Gaming";
            bindings = <
          &kp RET    &kp N9  &kp N8     &kp N7     &kp PSCRN  &none  &none      &none      &none     &none
          &kp LCTRL  &kp N3  &kp N2     &kp N1     &kp ESC    &none  &kp LSHFT  &kp LCTRL  &kp LGUI  &kp LALT
&to BASE  &kp N0     &kp N6  &kp N5     &kp N4     &kp TAB    &none  &none      &none      &none     &none     &none
                             &kp LALT   &kp SPACE  &kp LSHFT  &none  &none      &none
            >;
        };

    };
};
